#!/bin/sh
############################################################################
#   Copyright 2007,2010 Impinj, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
############################################################################


STD_TESTS_DX101=../../Tests/dx101

VERSION=`cat ../Library/ltkcpp_base.h | grep '^#define LTKCPP_VERSION_STR' | cut -d\" -f2 | sed -e s/\\\./\_/g`
URL="file://`hostname`/`pwd`/$0"

VALGRIND=/opt/ltk/bin/valgrind
if [ ! -x $VALGRIND ]; then
    VALGRIND=valgrind
fi


rm -f *.tmp *.bin *.val


# put your test vector name and description below to run the tests
testVectors=(
              "$STD_TESTS_DX101/dx101_a" \
              "$STD_TESTS_DX101/dx101_b" \
              "$STD_TESTS_DX101/dx101_c" \
	      "$STD_TESTS_DX101/dx101_d" \
	      "$STD_TESTS_DX101/dx101_e" \
	      "$STD_TESTS_DX101/dx101_f" \

	      )

testVectorDesc=(      
                  "Set of standard LLRP message" \
                  "Includes tag report variations including a very large report" \
                  "Tests of EPCs of various sizes" \
                  "Includes AccessSpecs of varying shapes and sizes." \
                  "Includes Custom parameters at each extension point." \
                  "Same as dx101_a with XML whitespace variations" \
               )

runDx101Standard ()
{
    testPath=$1;    
    testDesc=$2;
    testName=${testPath##*/}; 

    echo "================================================================"
    echo "== Run dx101 standard on $testName. "
    echo "==      $testDesc"
    echo "================================================================"
    # convert the reference binary to XML
    ./llrp2xml $testPath.bin > ${testName}_ltkcpp_refbin.xml
    # convert the reference XML to binary
    ./xml2llrp $testPath.xml > ${testName}_ltkcpp_refxml.bin
    # convert the binary from the reference XML back to binary
    ./xml2llrp ${testName}_ltkcpp_refbin.xml > ${testName}_ltkcpp_refbin.bin

    if  ! cmp -s ${testName}_ltkcpp_refxml.bin $testPath.bin 
    then
        echo "$testName -- FAILED -- XML -> LLRP conversion"
    elif ! cmp -s ${testName}_ltkcpp_refbin.bin $testPath.bin 
    then
        echo "$testName -- FAILED -- LLRP -> XML conversion"
    else
        echo $testName -- PASSED
	# delete the files if things worked 
	rm -f ${testName}_ltkcpp_refbin.bin
	rm -f ${testName}_ltkcpp_refxml.bin
	rm -f ${testName}_ltkcpp_refbin.xml
    fi
    echo ""
    echo ""
    echo ""
}

runDx101Valgrind ()
{
    testPath=$1;
    testDesc=$2;
    testName=${testPath##*/};    

    echo "================================================================"
    echo "== Run dx101 valgrind on $testName. "
    echo "==      $testDesc"
    echo "================================================================"

    $VALGRIND --max-stackframe=4194376 ./llrp2xml $testPath.bin > /dev/null 2>${testName}_ltkcpp_llrp2xml.val
    if ! grep -q 'All heap blocks were freed -- no leaks are possible' ${testName}_ltkcpp_llrp2xml.val    
    then
        echo "$testName -- FAILED -- LLRP -> XML conversion"
    else
        $VALGRIND --max-stackframe=4194376 ./xml2llrp $testPath.xml > /dev/null 2>${testName}_ltkcpp_xml2llrp.val
        if ! grep -q 'All heap blocks were freed -- no leaks are possible' ${testName}_ltkcpp_xml2llrp.val 
	then
            echo "$testName -- FAILED -- XML -> LLRP conversion"
	else
            echo $testName -- PASSED
	    # delete the files if things worked 
	    rm -f ${testName}_ltkcpp_llrp2xml.val
	    rm -f ${testName}_ltkcpp_xml2llrp.val 
	fi
    fi
   
    echo ""
    echo ""
    echo ""
}

# run the actual tests 
testCnt=${#testVectors[@]}


for ((a=0; a < $testCnt ; a++))
do
    runDx101Standard "${testVectors[$a]}" "${testVectorDesc[$a]}"  
    runDx101Valgrind "${testVectors[$a]}" "${testVectorDesc[$a]}"  
done



